<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Aleksey Zhidkov</title><link>https://azhidkov.pro/en/posts/</link><description>Recent content in Posts on Aleksey Zhidkov</description><generator>Hugo -- gohugo.io</generator><language>en-en</language><lastBuildDate>Wed, 28 Apr 2021 13:25:37 +0700</lastBuildDate><atom:link href="https://azhidkov.pro/en/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Uncle Bob Isn't Always Right</title><link>https://azhidkov.pro/en/posts/21/04/srp-ocp-conflict/</link><pubDate>Wed, 28 Apr 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/04/srp-ocp-conflict/</guid><description>Note: You can follow the blog’s updates in my channel: Ergonomic code (rus)
Uncle Bob’s Latest ArticleI’ve just read Uncle Bob’s recent article and must say I disagree.
Here’s a brief overview of the contents.
Someone on the internet asked how’d one go about refactoring this code.
Uncle Bob said that the right way would be to encapsulate this &amp;#39;if&amp;#39; statement in a factory object.
He followed with:</description></item><item><title>Why You Should Avoid Using JPA/Hibernate in Production</title><link>https://azhidkov.pro/en/posts/21/04/why-jpa-should-be-avoided/</link><pubDate>Sat, 03 Apr 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/04/why-jpa-should-be-avoided/</guid><description>Note: You can follow the blog updates in my channel: Ergonomic Code (rus)
22.08.21 edit:
Section Bad procedural programming styleSection What to do if JPA is unavoidableSection Links Disclaimer: I passionately hate JPA and Hibernate.My relationship with Hibernate (JPA hasn’t yet existed back then) has been rocky from the very beginning. Somewhere as far back as 2005 or 2007, an interviewer asked me how I’d go about mapping the 1-N relationship with Hibernate.</description></item><item><title>On Systems Decomposition</title><link>https://azhidkov.pro/en/posts/21/03/250326-project-decomposition/</link><pubDate>Wed, 24 Mar 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/03/250326-project-decomposition/</guid><description>*Dislaimer: here’s a brief link post on a topic that’s book chapter worthy.
Finally, your dream has come true. You’ll now get to build a project from the ground up. Finally, you can do everything right yourself instead of fighting legacy code written a hundred years ago by people you’ve never even seen.
How would you do that, though? How to build a system you won’t be cursed for by your successors?</description></item><item><title>The Tests You Can Trust</title><link>https://azhidkov.pro/en/posts/21/03/210321-project-l-testing/</link><pubDate>Sat, 13 Mar 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/03/210321-project-l-testing/</guid><description>I’m working on a project where I’m the lead back-end developer. Naturally, I’m trying to keep everything in line with my Ergonomic Approach.
The code base will be ergonomic if you have a set of tests you can trust. If the tests pass, it means the build is ready for release. There’s no other way around this.
In this post, I’ll talk about the testing strategy I’m using for the &amp;#39;L&amp;#39; Project.</description></item><item><title>Non-Ergonomic Jackson</title><link>https://azhidkov.pro/en/posts/21/02/210212-jackson-write-object-as-string/</link><pubDate>Tue, 23 Feb 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/02/210212-jackson-write-object-as-string/</guid><description>Recently, I’ve written this code (or something like that) to serialize a JSON object via Jackson:
public String renderToJson(Object dto) { try { return objectMapper.writeValueAsString(dto); } catch (IOException e) { throw new AssertionError(&amp;#34;Unexpected IOException converting object to json&amp;#34;); } } It was almost offensive to my eye. I was creating a string object in memory. What the heck would that have to do with IO? I had no time to ponder about this, though.</description></item></channel></rss>