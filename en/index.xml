<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aleksey Zhidkov</title><link>https://azhidkov.pro/en/</link><description>Recent content on Aleksey Zhidkov</description><generator>Hugo -- gohugo.io</generator><language>en-en</language><lastBuildDate>Mon, 21 Jun 2021 11:25:37 +0700</lastBuildDate><atom:link href="https://azhidkov.pro/en/index.xml" rel="self" type="application/rss+xml"/><item><title>The Many Faces of the Single Responsibility Principle</title><link>https://azhidkov.pro/en/posts/21/06/210626-srp-interpretations/</link><pubDate>Mon, 21 Jun 2021 11:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/06/210626-srp-interpretations/</guid><description>Note: You can follow the blog’s updates in my channel: Ergonomic code (rus)
It feels like any solid software engineer knows of SOLID in general and the single-responsibility principle (SRP) in particular.
In case you don’t…​The SOLID is a set of principles guiding object-oriented design. It was put together by Robert Martin, who’s also known as Uncle Bob. These principles go as follows:
Single Responsibility Principle: A module should have one, and only one, reason to change.</description></item><item><title>Uncle Bob Isn't Always Right</title><link>https://azhidkov.pro/en/posts/21/04/srp-ocp-conflict/</link><pubDate>Wed, 28 Apr 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/04/srp-ocp-conflict/</guid><description>Note: You can follow the blog’s updates in my channel: Ergonomic code (rus)
Uncle Bob’s Latest ArticleI’ve just read Uncle Bob’s recent article and must say I disagree.
Here’s a brief overview of the contents.
Someone on the internet asked how’d one go about refactoring this code.
Uncle Bob said that the right way would be to encapsulate this &amp;#39;if&amp;#39; statement in a factory object.
He followed with:</description></item><item><title>Why You Should Avoid Using JPA/Hibernate in Production</title><link>https://azhidkov.pro/en/posts/21/04/why-jpa-should-be-avoided/</link><pubDate>Sat, 03 Apr 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/04/why-jpa-should-be-avoided/</guid><description>Note: You can follow the blog updates in my channel: Ergonomic Code (rus)
22.08.21 edit:
Section Bad procedural programming styleSection What to do if JPA is unavoidableSection Links Disclaimer: I passionately hate JPA and Hibernate.My relationship with Hibernate (JPA hasn’t yet existed back then) has been rocky from the very beginning. Somewhere as far back as 2005 or 2007, an interviewer asked me how I’d go about mapping the 1-N relationship with Hibernate.</description></item><item><title>On Systems Decomposition</title><link>https://azhidkov.pro/en/posts/21/03/250326-project-decomposition/</link><pubDate>Wed, 24 Mar 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/03/250326-project-decomposition/</guid><description>*Dislaimer: here’s a brief link post on a topic that’s book chapter worthy.
Finally, your dream has come true. You’ll now get to build a project from the ground up. Finally, you can do everything right yourself instead of fighting legacy code written a hundred years ago by people you’ve never even seen.
How would you do that, though? How to build a system you won’t be cursed for by your successors?</description></item><item><title>Portfolio</title><link>https://azhidkov.pro/en/portfolio/</link><pubDate>Sat, 13 Mar 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/portfolio/</guid><description>Aleksey ZhidkovArchitect, Tech Lead https://azhidkov.pro https://github.com/d-r-q
I specialize in developing information systems ([1],[2],[3]) powered by the Java platform. However, I’m quite versatile thanks to having nineteen years of experience, loving what I do, and reading English fluently. That’s why my background also includes working on Python desktop apps, low-level video capture software with C, and Kotlin Multiplatform Mobile apps.
I’ve been working as a software engineer since 2005, and as an independent consultant since 2017.</description></item><item><title>The Tests You Can Trust</title><link>https://azhidkov.pro/en/posts/21/03/210321-project-l-testing/</link><pubDate>Sat, 13 Mar 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/03/210321-project-l-testing/</guid><description>I’m working on a project where I’m the lead back-end developer. Naturally, I’m trying to keep everything in line with my Ergonomic Approach.
The code base will be ergonomic if you have a set of tests you can trust. If the tests pass, it means the build is ready for release. There’s no other way around this.
In this post, I’ll talk about the testing strategy I’m using for the &amp;#39;L&amp;#39; Project.</description></item><item><title>Non-Ergonomic Jackson</title><link>https://azhidkov.pro/en/posts/21/02/210212-jackson-write-object-as-string/</link><pubDate>Tue, 23 Feb 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/02/210212-jackson-write-object-as-string/</guid><description>Recently, I’ve written this code (or something like that) to serialize a JSON object via Jackson:
public String renderToJson(Object dto) { try { return objectMapper.writeValueAsString(dto); } catch (IOException e) { throw new AssertionError(&amp;#34;Unexpected IOException converting object to json&amp;#34;); } } It was almost offensive to my eye. I was creating a string object in memory. What the heck would that have to do with IO? I had no time to ponder about this, though.</description></item><item><title>Pure and dirty functions, effects, signal processing, side effects: pure functions</title><link>https://azhidkov.pro/en/posts/21/01/210112-pure-functions/</link><pubDate>Tue, 12 Jan 2021 13:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/01/210112-pure-functions/</guid><description>Note: You can follow the blog’s updates in my channel: Ergonomic Code (rus)
The first part of my terminology series can be found here
Note that I’ve broadened the topic I’m covering here. Apart from dirty functions announced yesterday, I also mentioned signals. The title is long-ish, but let’s keep it this way for now :) Today, we’ll be talking about pure functions.
Pure functions are functions with no effects and no side effects.</description></item><item><title>Single Responsibility Principle considered harmful</title><link>https://azhidkov.pro/en/posts/21/01/210107-srp/</link><pubDate>Thu, 07 Jan 2021 07:25:37 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/01/210107-srp/</guid><description>I’ve just come across this article, and it bummed me out quite a bit.
Theoretically, the principle per se (that is, the Single Responsibility Principle) may very well be a good one. There’s just one problem: Uncle Bob has been trying to explain it for 20 (twenty) years to no avail.
I managed to track back Martin’s process of defining this term. To sum it up:
2003: &amp;#34;A class should have only one reason to change&amp;#34; - Agile Software Development, Principles, Patterns, and Practices2008: &amp;#34;The Single Responsibility Principle (SRP) states that a class or module should have one, and only one, reason to change&amp;#34; - Clean Code2014: &amp;#34;Gather together the things that change for the same reasons.</description></item><item><title>Pure and efficient functions: Introduction</title><link>https://azhidkov.pro/en/posts/21/01/210105-pure-functions-and-effects-intro/</link><pubDate>Tue, 05 Jan 2021 09:19:22 +0700</pubDate><guid>https://azhidkov.pro/en/posts/21/01/210105-pure-functions-and-effects-intro/</guid><description>In this blog and my book (rus), I repeat, time and again, the same mantra about &amp;#34;separating the effects from the logic.&amp;#34; I think it’s necessary that my readers fully understand what I mean. However, when I started to analyze the existing terminology, I was surprised to find out there’s no uniform framework. The options that are available don’t include the nuances I believe to be important. Therefore, I decided to write an article series about the terminology I’m using.</description></item></channel></rss>